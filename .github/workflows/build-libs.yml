name: Build Libraries

on:
  push:
    paths:
      - .github/workflows/**
      - source/**
      - patches/**
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  BUILD_TYPE: Release
  NET_FRAMEWORK: net7.0

jobs:
  build-fnalibs:
    strategy:
      matrix:
        include:
          - name: Windows x86
            os: windows-latest
            platform: windows
            msys2_system: mingw32
            msys2_env: i686
            cmake_flags: --verbose --parallel

          - name: Windows x64
            os: windows-latest
            platform: windows
            msys2_system: mingw64
            msys2_env: x86_64
            cmake_flags: --verbose --parallel

          - name: Linux x64
            os: ubuntu-latest
            platform: linux
            container: debian:buster # Required for GLIBC v2.28
            cmake_flags:

          - name: macOS x64
            os: macos-13
            platform: macos
            cmake_flags: --verbose --parallel

    name: FNAlibs (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    env:
      MACOSX_DEPLOYMENT_TARGET: 10.12

    defaults:
      run:
        shell: sh

    steps:
    - name: Install Git and cURL (Linux)
      if: ${{ matrix.platform == 'linux' }}
      run: |
        # Debian buster is now EOL, need to set APT to use the package archive.
        sed -i s/deb.debian.org/archive.debian.org/g /etc/apt/sources.list
        apt-get update
        apt-get install -y git curl ca-certificates

    - name: Checkout repository (Windows & macOS)
      uses: actions/checkout@v4
      if: ${{ matrix.platform != 'linux' }}
      with:
        sparse-checkout: |
          source
          patches
        submodules: recursive

    # Need to use CLI since checkout action doesn't like that Git was installed manually
    - name: Checkout repository (Linux)
      if: ${{ matrix.platform == 'linux' }}
      run: |
        git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

        git init
        git remote add origin https://github.com/${{ github.repository }}.git
        git config core.sparseCheckout true

        echo "source" >> .git/info/sparse-checkout
        echo "patches" >> .git/info/sparse-checkout

        git fetch --depth=1 origin ${{ github.ref }}
        git checkout FETCH_HEAD

        git submodule update --init --recursive

    # Setup
    - name: Set up MSVC (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: ${{ matrix.platform == 'windows' }}
      with:
        arch: ${{ matrix.msys2_env == 'x86_64' && 'x64' || 'x86' }}

    - name: Setup CMake (Windows)
      uses: jwlawson/actions-setup-cmake@master
      if: ${{ matrix.platform == 'windows' }}

    - name: Set up Ninja (Windows)
      uses: turtlesec-no/get-ninja@main
      if: ${{ matrix.platform == 'windows' }}

    - name: Set up NASM (Windows)
      uses: ilammy/setup-nasm@v1
      if: ${{ matrix.platform == 'windows' }}
    
    - name: Set up MSYS2 (Windows)
      uses: msys2/setup-msys2@v2
      if: ${{ matrix.platform == 'windows' }}
      with:
        msystem: ${{ matrix.msys2_system }}
        install: >-
          mingw-w64-${{ matrix.msys2_env }}-cc
          mingw-w64-${{ matrix.msys2_env }}-make

    - name: Install dependencies (macOS)
      if: ${{ matrix.platform == 'macos' }}
      run: |
        # SDL2 dependencies
        brew install ninja

    - name: Install dependencies (Linux)
      if: ${{ matrix.platform == 'linux' }}
      run: |
        # SDL2 dependencies (https://github.com/libsdl-org/SDL/blob/main/docs/README-linux.md)
        apt-get install -y build-essential make \
            pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
            libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev \
            libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev

        # Setup Debian Bullseye PPA for newer CMake and Wayland version
        echo "deb http://deb.debian.org/debian bullseye main" >> /etc/apt/sources.list
        echo "deb http://security.debian.org/debian-security bullseye-security main" >> /etc/apt/sources.list
        echo "deb http://archive.debian.org/debian bullseye-backports main" >> /etc/apt/sources.list
        cat <<EOF > /etc/apt/preferences.d/bullseye
        Package: *
        Pin: release n=bullseye
        Pin-Priority: 100
        EOF

        apt-get update
        apt-get install -y -t bullseye cmake libwayland-dev libdecor-0-dev


    # SDL2
    - name: Configure SDL2
      working-directory: source/SDL2
      run: |
        cmake -B build -G Ninja \
          -DSDL_VENDOR_INFO="GitHub Workflow" \
          -DSDL_CMAKE_DEBUG_POSTFIX="" \
          -DSDL_FORCE_STATIC_VCRT=ON \
          -DCMAKE_INSTALL_PREFIX=cmake_prefix \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build SDL2
      working-directory: source/SDL2
      run: cmake --build build --config ${{ env.BUILD_TYPE }} ${{ matrix.cmake_flags }}

    - name: Install SDL2
      working-directory: source/SDL2
      run: |
        set -eu
        cmake --install build --config ${{ env.BUILD_TYPE }}
        echo "SDL2_DIR=$(pwd)/cmake_prefix" >> $GITHUB_ENV

    - name: Export SDL2 library path (Windows)
      if: ${{ matrix.platform == 'windows' }}
      run: echo "SDL2_LIB=${{ env.SDL2_DIR }}/lib/SDL2.lib" >> $GITHUB_ENV
      
    - name: Export SDL2 library path (macOS)
      if: ${{ matrix.platform == 'macos' }}
      run: echo "SDL2_LIB=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.dylib" >> $GITHUB_ENV
      
    - name: Export SDL2 library path (Linux)
      if: ${{ matrix.platform == 'linux' }}
      run: echo "SDL2_LIB=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.so" >> $GITHUB_ENV

    # FNA3D  
    - name: Patch FNA3D + MojoShader
      working-directory: source/FNA/lib/FNA3D
      run: |
        # Required for applying patches
        git config --global user.name github-actions
        git config --global user.email github-actions@github.com
        
        git am ../../../../patches/FNA3D_ExclusiveFullscreen.patch
        git am ../../../../patches/FNA3D_Headless.patch

        if [ "x${{ runner.os }}" = "xWindows" ]; then
          # Update CMake to use CMAKE_MSVC_RUNTIME_LIBRARY
          sed -i 's/cmake_minimum_required.*/cmake_minimum_required(VERSION 3.16)/' CMakeLists.txt
        fi

        cd MojoShader
        git am ../../../../../patches/MojoShader_Headless.patch
        cd ..

    - name: Configure FNA3D
      working-directory: source/FNA/lib/FNA3D
      run: |
        cmake -B build -G Ninja \
          -DSDL_PTHREADS=OFF \
          -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 \
          -DSDL2_LIBRARIES=${{ env.SDL2_LIB }} \
          -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded$<$<CONFIG:Debug>:Debug>" \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build FNA3D
      working-directory: source/FNA/lib/FNA3D
      run: cmake --build build --config ${{ env.BUILD_TYPE }} ${{ matrix.cmake_flags }}

    # FAudio
    - name: Patch FAudio
      working-directory: source/FNA/lib/FAudio
      run: |
        if [ "x${{ runner.os }}" = "xWindows" ]; then
          # Update CMake to use CMAKE_MSVC_RUNTIME_LIBRARY
          sed -i 's/cmake_minimum_required.*/cmake_minimum_required(VERSION 3.16)/' CMakeLists.txt
        fi

    - name: Configure FAudio
      working-directory: source/FNA/lib/FAudio
      run: |
        cmake -B build -G Ninja \
          -DSDL_PTHREADS=OFF \
          -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 \
          -DSDL2_LIBRARIES=${{ env.SDL2_LIB }} \
          -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded$<$<CONFIG:Debug>:Debug>" \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
      
    - name: Build FAudio
      working-directory: source/FNA/lib/FAudio
      run: cmake --build build --config ${{ env.BUILD_TYPE }} ${{ matrix.cmake_flags }}

    # Theorafile
    - name: Build Theorafile (Windows)
      if: ${{ matrix.platform == 'windows' }}
      working-directory: source/FNA/lib/Theorafile
      shell: msys2 {0}
      run: mingw32-make
      
    - name: Build Theorafile (macOS & Linux)
      if: ${{ matrix.platform != 'windows' }}
      working-directory: source/FNA/lib/Theorafile
      run: make

    # MoltenVK
    - name: Build MoltenVK (macOS)
      if: ${{ matrix.platform == 'macos' }}
      working-directory: source/MoltenVK
      run: |
        ./fetchDependencies --macos -v
        make macos

    - name: Build Vulkan Loader (macOS)
      if: ${{ matrix.platform == 'macos' }}
      working-directory: source/Vulkan-Loader
      run: |
        mkdir -p build
        cd build

        cmake .. \
          -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
          -DUPDATE_DEPS=ON \
          -DVULKAN_HEADERS_INSTALL_DIR="$PWD/../../Vulkan-Headers" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13

        make

    # To downgrade Celeste builds that target sdl3 to sdl2, on linux specifically, we need to replace libfmod_SDL.so, since it targets SDL3
    - name: Build FMOD_SDL (linux)
      if: ${{ matrix.platform == 'linux' }}
      working-directory: source/FMOD_SDL_BUILD_DEPS
      run: |
        make -e SDL2_PREFIX=${{ env.SDL2_DIR }}


    # FNA (Only built on Linux, due to being platform agnostic)
    - uses: actions/setup-dotnet@v4
      if: ${{ matrix.platform == 'linux' }}
      with:
        dotnet-version: '8'

    - name: Build FNA
      if: ${{ matrix.platform == 'linux' }}
      working-directory: source/FNA
      run: dotnet build -c ${{ env.BUILD_TYPE }} FNA.NetFramework.csproj

    # Upload
    - name: Copy binaries (Windows)
      if: ${{ matrix.platform == 'windows' }}
      run: |
        cp ${{ env.SDL2_DIR }}/bin/SDL2.dll SDL2.dll
        cp source/FNA/lib/FAudio/build/FAudio.dll FAudio.dll
        cp source/FNA/lib/FNA3D/build/FNA3D.dll FNA3D.dll
        cp source/FNA/lib/Theorafile/libtheorafile.dll libtheorafile.dll

    - name: Copy binaries (macOS)
      if: ${{ matrix.platform == 'macos' }}
      run: |
        cp ${{ env.SDL2_DIR }}/lib/libSDL2-2.0.0.dylib libSDL2-2.0.0.dylib
        cp source/FNA/lib/FAudio/build/libFAudio.0.dylib libFAudio.0.dylib
        cp source/FNA/lib/FNA3D/build/libFNA3D.0.dylib libFNA3D.0.dylib
        cp source/FNA/lib/Theorafile/libtheorafile.dylib libtheorafile.dylib
        cp source/MoltenVK/Package/Release/MoltenVK/dylib/macOS/libMoltenVK.dylib libMoltenVK.dylib
        cp source/Vulkan-Loader/build/loader/libvulkan.1.dylib libvulkan.1.dylib

    - name: Copy binaries (Linux)
      if: ${{ matrix.platform == 'linux' }}
      run: |
        cp source/FNA/bin/${{ env.BUILD_TYPE }}/net4.0/FNA.dll FNA.dll
        cp source/FNA/bin/${{ env.BUILD_TYPE }}/net4.0/FNA.pdb FNA.pdb
        cp ${{ env.SDL2_DIR }}/lib/libSDL2-2.0.so.0 libSDL2-2.0.so.0
        cp source/FNA/lib/FAudio/build/libFAudio.so.0 libFAudio.so.0
        cp source/FNA/lib/FNA3D/build/libFNA3D.so.0 libFNA3D.so.0
        cp source/FNA/lib/Theorafile/libtheorafile.so libtheorafile.so
        cp source/FMOD_SDL_BUILD_DEPS/libfmod_SDL.so libfmod_SDL.so

    - name: Upload Artifacts (Windows)
      uses: actions/upload-artifact@v4
      if: ${{ matrix.platform == 'windows' }}
      with:
        name: fnalibs-windows-${{ matrix.msys2_env }}
        path: |
          SDL2.dll
          FAudio.dll
          FNA3D.dll
          libtheorafile.dll

    - name: Upload Artifacts (macOS)
      uses: actions/upload-artifact@v4
      if: ${{ matrix.platform == 'macos' }}
      with:
        name: fnalibs-macos-x86_64
        path: |
          libSDL2-2.0.0.dylib
          libFAudio.0.dylib
          libFNA3D.0.dylib
          libtheorafile.dylib
          libMoltenVK.dylib
          libvulkan.1.dylib

    - name: Upload Artifacts (Linux)
      uses: actions/upload-artifact@v4
      if: ${{ matrix.platform == 'linux' }}
      with:
        name: fnalibs-linux-x86_64
        path: |
          FNA.dll
          FNA.pdb
          libSDL2-2.0.so.0
          libFAudio.so.0
          libFNA3D.so.0
          libtheorafile.so
          libfmod_SDL.so

  build-piton:
    strategy:
      matrix:
        include:
          - name: Windows x86
            os: windows-latest
            toolchain: 1.77.0-x86_64-pc-windows-msvc # Last version to support Windows 7
            target: i686-pc-windows-msvc
            ui: gui
            lib_name: piton-gui-win_x86.exe

          - name: Windows x64
            os: windows-latest
            toolchain: 1.77.0-x86_64-pc-windows-msvc # Last version to support Windows 7
            target: x86_64-pc-windows-msvc
            ui: gui
            lib_name: piton-gui-win_x64.exe

          - name: Linux x64
            os: ubuntu-latest
            toolchain: 1.86.0-x86_64-unknown-linux-gnu
            target: x86_64-unknown-linux-gnu
            ui: none
            lib_name: piton-linux_x64
            container: quay.io/pypa/manylinux_2_28_x86_64 # See https://kobzol.github.io/rust/ci/2021/05/07/building-rust-binaries-in-ci-that-work-with-older-glibc.html

          - name: macOS x64
            os: macos-13
            toolchain: 1.86.0-x86_64-apple-darwin
            target: x86_64-apple-darwin
            ui: gui
            lib_name: piton-gui-macos_x64


    name: Piton (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    env:
      CARGO_TERM_COLOR: always
      MACOSX_DEPLOYMENT_TARGET: 10.12

    steps:
    - uses: actions/checkout@v3
      with:
        sparse-checkout: source/Piton
        submodules: true

    - name: Setup environment variables
      run: |
        echo "RUSTUP_HOME=$HOME/.rustup" >> "$GITHUB_ENV"
        echo "CARGO_HOME=$HOME/.cargo" >> "$GITHUB_ENV"

    - name: Setup Rust toolchain
      if: ${{ !steps.cache.outputs.cache-hit }}
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --profile minimal --default-toolchain ${{ matrix.toolchain }} --target ${{ matrix.target }} -y

    - name: Build Piton binary
      working-directory: source/Piton/apphost
      run: ~/.cargo/bin/cargo build --verbose --release --target ${{ matrix.target }} -F ui-${{ matrix.ui }}

    - name: Move Piton binary
      working-directory: source/Piton/apphost
      run: mv target/${{ matrix.target }}/release/${{ startsWith(matrix.os, 'windows') && 'piton.exe' || 'piton' }} ${{ matrix.lib_name }}
  
    - name: Upload Piton binaries
      uses: actions/upload-artifact@v4
      with:
        name: piton-apphosts-${{ matrix.target }}
        path: source/Piton/apphost/${{ matrix.lib_name }}

  generate-lib-ext:
    name: Generate lib-ext
    runs-on: ubuntu-latest
    needs: [build-fnalibs, build-piton]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup file structure
        run: |
          rm -rf ../lib-ext ../binaries
          mkdir ../lib-ext ../binaries

      - name: Merge Piton apphosts
        uses: actions/upload-artifact/merge@v4
        with:
          name: piton-apphosts
          pattern: piton-apphosts-*
  
      - uses: actions/download-artifact@v4
        with:
          path: ../binaries
          
      - name: Download Discord Game SDK v3.2.1
        run: |
          wget https://dl-game-sdk.discordapp.net/3.2.1/discord_game_sdk.zip --output-document ../binaries/discord_game_sdk.zip
          unzip ../binaries/discord_game_sdk.zip -d ../binaries/discord_game_sdk

      - name: Display structure of downloaded files
        run: ls -R ../binaries

      - name: Setup lib-ext
        run: |
          ### Directory structure
          mkdir -p ../lib-ext/lib-vanilla
          mkdir -p ../lib-ext/lib-vanilla/osx
          mkdir -p ../lib-ext/lib-vanilla/lib
          mkdir -p ../lib-ext/lib-vanilla/lib64

          mkdir -p ../lib-ext/lib64-win-x86
          mkdir -p ../lib-ext/lib64-win-x64
          mkdir -p ../lib-ext/lib64-osx
          mkdir -p ../lib-ext/lib64-linux
         
          ### Vendored files
          cp README_lib-ext.md ../lib-ext/README.md
          cp source/SDL_GameControllerDB/gamecontrollerdb.txt ../lib-ext

          # Windows x86
          cp binaries/steamworks/windows-x86/steam_api.dll ../lib-ext/lib64-win-x86
          cp binaries/steamworks/windows-x86/Steamworks.NET.dll ../lib-ext/lib64-win-x86

          # Windows x64
          cp binaries/steamworks/windows-x64/steam_api64.dll ../lib-ext/lib64-win-x64
          cp binaries/steamworks/windows-x64/Steamworks.NET.dll ../lib-ext/lib64-win-x64
          cp binaries/fmod/windows-x64/fmod64.dll ../lib-ext/lib64-win-x64
          cp binaries/fmod/windows-x64/fmodstudio64.dll ../lib-ext/lib64-win-x64

          # OSX
          cp binaries/steamworks/osx/libsteam_api.dylib ../lib-ext/lib64-osx
          cp binaries/steamworks/osx/Steamworks.NET.dll ../lib-ext/lib64-osx

          # Linux x64
          cp binaries/steamworks/linux-x64/libsteam_api.so ../lib-ext/lib64-linux
          cp binaries/steamworks/linux-x64/Steamworks.NET.dll ../lib-ext/lib64-linux

          # Piton
          cp piton-runtime.yaml ../lib-ext/piton-runtime.yaml

          pushd ../lib-ext
          
          ### Vanilla overrides
          cp ../binaries/fnalibs-linux-x86_64/FNA.dll lib-vanilla
          cp ../binaries/fnalibs-linux-x86_64/FNA.pdb lib-vanilla

          # Windows x86
          cp ../binaries/fnalibs-windows-i686/FNA3D.dll lib-vanilla
          cp ../binaries/fnalibs-windows-i686/FAudio.dll lib-vanilla
          cp ../binaries/fnalibs-windows-i686/SDL2.dll lib-vanilla
          cp ../binaries/fnalibs-windows-i686/libtheorafile.dll lib-vanilla

          # macOS x64
          cp ../binaries/fnalibs-macos-x86_64/libFNA3D.0.dylib lib-vanilla/osx
          cp ../binaries/fnalibs-macos-x86_64/libFAudio.0.dylib lib-vanilla/osx
          cp ../binaries/fnalibs-macos-x86_64/libSDL2-2.0.0.dylib lib-vanilla/osx
          cp ../binaries/fnalibs-macos-x86_64/libtheorafile.dylib lib-vanilla/osx
          cp ../binaries/fnalibs-macos-x86_64/libMoltenVK.dylib lib-vanilla/osx
          cp ../binaries/fnalibs-macos-x86_64/libvulkan.1.dylib lib-vanilla/osx

          # Linux x64
          cp ../binaries/fnalibs-linux-x86_64/libSDL2-2.0.so.0 lib-vanilla/lib64
          cp ../binaries/fnalibs-linux-x86_64/libFAudio.so.0 lib-vanilla/lib64
          cp ../binaries/fnalibs-linux-x86_64/libFNA3D.so.0 lib-vanilla/lib64
          cp ../binaries/fnalibs-linux-x86_64/libtheorafile.so lib-vanilla/lib64

          ### Everest Libraries
          mv ../binaries/fnalibs-linux-x86_64/FNA.dll .
          mv ../binaries/fnalibs-linux-x86_64/FNA.pdb .

          mv ../binaries/fnalibs-windows-i686/* lib64-win-x86
          mv ../binaries/fnalibs-windows-x86_64/* lib64-win-x64
          mv ../binaries/fnalibs-macos-x86_64/* lib64-osx
          mv ../binaries/fnalibs-linux-x86_64/* lib64-linux

          cp ../binaries/discord_game_sdk/lib/x86/discord_game_sdk.dll lib64-win-x86
          cp ../binaries/discord_game_sdk/lib/x86_64/discord_game_sdk.dll lib64-win-x64
          cp ../binaries/discord_game_sdk/lib/x86_64/discord_game_sdk.dylib lib64-osx/libdiscord_game_sdk.dylib
          cp ../binaries/discord_game_sdk/lib/x86_64/discord_game_sdk.so lib64-linux/libdiscord_game_sdk.so

          ### Piton
          mv ../binaries/piton-apphosts piton

      - name: Display the new structure
        run: ls -R ../lib-ext

      - name: Commit binaries to repository
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          git checkout -b binaries
          git fetch origin binaries
          git reset --hard origin/binaries
          
          rm -rf *
          cp -r ../lib-ext/* .

          git add -f .
          git commit -m "Update binaries for ${{ github.sha }}" || true
          git push origin binaries
